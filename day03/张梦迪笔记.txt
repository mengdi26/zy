项目提交到仓库 2、mvp抽取封装 3、项目主布局搭建出来，实现项目首页


技术文档：
1、接口文档	蓝湖（项目管理平台）
2、需求文档	原型设计图
3、设计文档
4、app的用户手册

常用的java设计模式   23种设计模式
1、单例模式（懒汉式，饿汉式）
2、工厂模式（简单工厂，抽象工厂，工厂方法模式，静态工厂）
3、观察者模式
4、责任模式
5、建造者模式
6、代理模式
7、装饰模式


五中线程池
1、缓存线程池
2、定长线程池	简单工厂
3、定时线城池	（主要用于倒计时）
4、单线程线程池（第一个执行完之后财智星第二个）
5、自定义线程池


day02
版本管理(控制)工具	（Git , SVN ）
1、方便先顾经理查看项目进度
2、进公司之后，发现代码写不下去，需要撤销重新写，回退
3、ABC,DEF,项目分工开发，项目合并

Git
分布式：是少有两个仓库（本地仓库+远程仓库）
集中式：只有一个远程仓库
			git add.		git commit -"注释"		     		git push
git分为：工作区（工作空间）---------------->  暂停区----------------->仓库区(本地仓库)（相当于硬盘）--------------->远程仓库（GitHub，码云）(相当于百度网盘)

用法：
1、配置git的用户名和邮箱

配置用具名密令：
git config --global user.name "";


配置邮箱：
git config --global user.email "";


验证用户名和邮箱
git config user.name
git config user.email


git初始化
git init

注意：需要先将本地工作空间中的所有文件提交到本地仓库才能望远程仓库提交

将工作空间里面所有的文件和文件家都提交到暂停区
git add .



将暂存区里面的文件提交到本地仓库
git commit -m "注释"


查看状态的命令
通过一个命令查看提交的所有文件状态  红色的代表未提交到暂停区，绿色代表已经提交到暂停区了但是没有提交到本地仓库（如果出现On branch master nothing to commit,working tree clean代表已经提交完成）
git status

查看每次提交到本地仓库的版本号（版本号是随机生成的一串字符串）
git reflog

回退到上一个版本 		回退到上上个版本		回退到上上上版本
git reset --hard HEAD^     	git reset --hard HEAD^^	git reset --hard HEAD^^^ ……

回退到某个具体的版本号
git reset --hard 968c48a	git reset --hard 回退到具体版本号
注意：多忘本地仓库提交，主食要写好，（实现一个功能提交一次，修复一个bug提交一次）





关联远程仓库
生成ssh密钥
ssh-keygen -t rsa -C "floveandroid@sina.com"

git关联远程仓库命令

git remote add origin 

把本地仓库的项目提交到远程仓库
git push -u origin master

要先拉取代码
git pull origin main --allow-unrelated-histories
git fetch origin master

如果上面拉去代码的方式不行，只需要常见一个空目录然后通过git clone 远程仓库的链接地址 命令将
远程仓库里的所有文件 包括






步骤：1、需要先创建一个本地的版本库（也就是一个文件夹）
2、通过命令git inti把这个文件夹变成Git可管理的仓库
3、把要上传的项目粘贴到这个本地Git仓库里面（粘贴后可以通过git status来查看你当前的状态），然后通过git add把项目添加到仓库（或git add .把目录下的所有文件添加到仓库，注意点时空阁隔开的）。在这个过程中其实可以一直使用git status来查看
这里提示你虽然把项目粘贴过来了，但还没有add到Git仓库上，然后通过git add . 把刚才复制过来的项目全部添加到仓库上
4、用git commit把仙姑提交到仓库
5、创建SSHKEY先看一下C盘用户目录下有没有.ssh目录，有的话看下面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建
ssh-keygen -t rsa -C "youremail@example.com"然后会有.ssh目录里找到id_rsa和id_rsa.pub两个文件
6、登录Github,找到右上角的图标，打开点进里面的Settings，在选中里面的SSH and GPGKEYS,点击右上角的New SSH key，然后再把刚才在id_rsa.pub里面的内容赋值到Title下面的Key，然后再把刚才id_rsa.pub里面的内容赋值到Title下免得Key内容框里面，最后点击Add SSH key，也就完成了SSH Key的加密
7、在Github上创建一个Git仓库  
8、在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地TEST仓库的命令行输入
9、关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过



day04:
屏幕适配：分辨率越大屏幕越清晰
单位：px：pixel { 像素 }简单点来说就是电子屏幕上的最基本的单位了，如电脑显示器常说得分辨率 1920*1080，就可以说整个屏幕是由1920个像素点与1080个像素点组成的

“px、pt、ppi、dpi、dp、sp”全能解析
pt：point { 点 }印刷厂用的单位，大小为1/27英寸

ppi：pioxel per inch { 每英寸像素数 }这个值越高，屏幕就越清晰，如普清-高清-超清这样的规律

dpi：dot per inch { 每英寸多少点 } 这个值越高，打印机打出来的东西越高清，打印机也就越贵

p：dip，Density-independent pixel { 安卓开发使用的长度单位 } 1dp表示在屏幕像素点密度为160ppi时1px的长度

sp：scale-independent pixel { 安卓开发时候用的字体大小单位 } 这个就是字号的大小了，比较好理解

目录			密度(dpi)	 		分辨率
xxxhdpi						
xxhdpi@3x(3倍图)		480     3			1080*1920
shdpi@2x(2倍图)		320     2
hdpi			240     1.5
mdpi@1x(1倍图)		160
ldpi			120

密度比：12  16  24  32  48 ===3:4:6:8:12=====0.75:1:1.5:2:3
美工切三套图标   @1x(1倍图)   @2x(2倍图)    @1x(1倍图)

3倍图  放到mdpi里面会出现什么问题？
高分辨率的图标放到低分辨率的目录里会出现什么问题？	图标会拉伸放大

低分率的图标放到高分率的目录里面会出现什么问题？		图标会压缩缩小

drawable里面放入一些app切图⁮图标资源      mipmap里面放入app的logo图标

真是开发时：三套图或者二套图   图标(放到对应的目录下面)+背景图(一般放到drawable-hdpi下或者drawable-xhdpi下面就行)

图片格式 == 9.png（不管如何拉伸如何压缩都不会变形）   button按钮纯色的






布局适配（px适配，dp适配(最小孔宽度限定符适配)，今日头条适配方案·	 ）


单位和分辨率的关系：
在mdpi  320*480分辨率下   1dp=1px
在hdpi   480*800分辨率下  1dp=1.5px
在xhdpi   720*1280分辨率下1dp=2px


主流分辨率：1080*1920    720*1280          
  
原先你们公司十一那个分辨率为基准做的原型图  一定要看下流量研究员钟主流分辨率率是多少，确定主流分辨率之后，告诉美工之前公司是以这个主流分辨率为基准做的原型图

1、明确原型图的分辨率是多少
根据原型图做布局适配 



















































